#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;

int countSetBits(int num) {
    int count = 0;
    while (num > 0) {
        count += (num & 1);
        num >>= 1;
    }
    return count;
}

int differentBitsSumPairwise(vector<int> &arr, int n) {
    long long result = 0;  // Use long long to avoid overflow
    for (int i = 0; i < 32; ++i) {  // 32 bits in an integer
        int countOnes = 0;
        for (int j = 0; j < n; ++j) {
            if (arr[j] & (1 << i)) {
                // If the ith bit is set in arr[j]
                countOnes++;
            }
        }
        int countZeros = n - countOnes;  // Count of zeros in the ith bit
        result = (result + (1LL * countOnes * countZeros)) % MOD;
    }
    // Double the result to account for pairs (x, y) and (y, x)
    return (2 * result) % MOD;
}
